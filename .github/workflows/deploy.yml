# This workflow will build a docker container, publish it to
# Google Container Registry, and deploy it on Cloud Run when
# a commit is pushed on master branch.
#

name: Build & Deploy
on:
  push:
    branches:
      - master

env:
  REGISTRY_HOSTNAME: gcr.io
  REGISTRY_IMAGE_NAME: ${{ github.event.repository.name }}
  CLOUD_RUN_SERVICE_NAME: ${{ github.event.repository.name }}
  CLOUD_RUN_REGION: us-central1
  CLOUD_RUN_CPU: 1
  CLOUD_RUN_MEMORY: 4Gi
  CLOUD_RUN_TIMEOUT: 120s
  CLOUD_RUN_MAX_INSTANCES: 1
  CLOUD_RUN_CONCURRENCY: 250

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    steps:
    - name: "Use Checkout"
      uses: actions/checkout@v2

    - name: "Authenticate Google Cloud Platform"
      if: endsWith(github.ref, '/master')
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: "Configure Google Cloud CLI"
      run: gcloud auth configure-docker

    - name: "Build Container Image"
      run: docker build . -t $REGISTRY_HOSTNAME/$GCP_PROJECT/$REGISTRY_IMAGE_NAME:${{ github.sha }}

    - name: "Publish Image to Container Registry"
      run: docker push $REGISTRY_HOSTNAME/$GCP_PROJECT/$REGISTRY_IMAGE_NAME:${{ github.sha }}

    - name: "Deploy Image on Cloud Run"
      run: |
        gcloud run deploy $CLOUD_RUN_SERVICE_NAME \
          --project $GCP_PROJECT \
          --image $REGISTRY_HOSTNAME/$GCP_PROJECT/$REGISTRY_IMAGE_NAME:${{ github.sha }} \
          --region $CLOUD_RUN_REGION \
          --cpu $CLOUD_RUN_CPU \
          --memory $CLOUD_RUN_MEMORY \
          --timeout $CLOUD_RUN_TIMEOUT \
          --max-instances $CLOUD_RUN_MAX_INSTANCES \
          --concurrency $CLOUD_RUN_CONCURRENCY \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --set-env-vars="JAVA_OPTS=-Xmx4096m" \
          --set-env-vars="MB_DB_TYPE=$MB_DB_TYPE" \
          --set-env-vars="MB_DB_HOST=$MB_DB_HOST" \
          --set-env-vars="MB_DB_PORT=$MB_DB_PORT" \
          --set-env-vars="MB_DB_DBNAME=$MB_DB_DBNAME" \
          --set-env-vars="MB_DB_USER=$MB_DB_USER" \
          --set-env-vars="MB_DB_PASS=$MB_DB_PASS" \

    - name: "Create Keep Alive"
      run: |
          gcloud scheduler jobs delete metabase-keep-alive \
            --project $GCP_PROJECT \
            --quiet || true
          gcloud scheduler jobs create http metabase-keep-alive \
            --project $GCP_PROJECT \
            --schedule="*/5 * * * *" \
            --http-method="get" \
            --uri="$MB_HOST"

    - name: "Check Container Ready"
      timeout-minutes: 10
      run: |
        while [ "$(curl $MB_HOST/api/health)" != "{\"status\":\"ok\"}" ]; \
          do curl -s -o /dev/null $MB_HOST; \
          sleep 3; \
          done
